import numpy as np

def hill_encrypt(message, key_matrix):
    message = message.replace(" ", "").upper()
    n = key_matrix.shape[0]
    padded_message = message + 'X' * ((n - len(message) % n) % n)  # Pad message if needed
    encrypted_text = ""

    for i in range(0, len(padded_message), n):
        block = [ord(char) - ord('A') for char in padded_message[i:i + n]]
        encrypted_block = np.dot(key_matrix, block) % 26
        encrypted_text += ''.join(chr(num + ord('A')) for num in encrypted_block)

    return encrypted_text

def hill_decrypt(encrypted_text, key_matrix):
    n = key_matrix.shape[0]
    det = int(np.round(np.linalg.det(key_matrix)))  # Determinant of the key matrix
    det_inv = pow(det, -1, 26)  # Modular inverse of determinant modulo 26
    adjugate_matrix = det_inv * np.round(det * np.linalg.inv(key_matrix)).astype(int) % 26
    decrypted_text = ""

    for i in range(0, len(encrypted_text), n):
        block = [ord(char) - ord('A') for char in encrypted_text[i:i + n]]
        decrypted_block = np.dot(adjugate_matrix, block) % 26
        decrypted_text += ''.join(chr(int(num) + ord('A')) for num in decrypted_block)

    return decrypted_text

# Example usage
key_matrix = np.array([[6, 24, 1], [13, 16, 10], [20, 17, 15]])  # Example key matrix
message = "ACT"
encrypted_message = hill_encrypt(message, key_matrix)
print(f"Hill Cipher Encrypted message: {encrypted_message}")
decrypted_message = hill_decrypt(encrypted_message, key_matrix)
print(f"Hill Cipher Decrypted message: {decrypted_message}")
